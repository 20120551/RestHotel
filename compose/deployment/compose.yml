version: "3"
services:
  elk:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    # container_name: elk
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    volumes:
      - elk:/usr/share/elasticsearch/data
    ports:
      - "9200"
    networks:
      - resthotel

  kibana:
    # container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.4.3
    environment:
      - ELASTICSEARCH_HOSTS=http://elk:9200
      - SERVER_BASEPATH=/kibana
      # - SERVER_REWRITE_BASEPATH=false
      # - SERVER_HOST=0.0.0.0
    ports:
      - "5601"
    networks:
      - resthotel
    depends_on:
      - elk

  rest_hotel:
    # container_name: rest_hotel
    image: 12082002/hotel.api:latest
    # build:
    #   context: ../../
    environment:
      # https://learn.microsoft.com/vi-vn/aspnet/core/security/docker-compose-https?view=aspnetcore-6.0
      # 80 for http, 443 for https
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/resthotel.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=pa55w0rd!
    ports:
      - "80" # http
      - "443"
    depends_on:
      - seq
      - elk
      - promethues
      - redis
      - sql
    volumes:
      - ./resthotel.pfx:/https/resthotel.pfx
      # - ${USERPROFILE}/.aspnet/https:/https:ro
      #some config port here
    networks:
      - resthotel

  nginx:
    # container_name: nginx
    hostname: "localhost"
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy.conf:/etc/nginx/proxy.conf:ro
      - ./resthotel.key.pem:/etc/nginx/resthotel.key.pem
      - ./resthotel.csr.pem:/etc/nginx/resthotel.csr.pem
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - rest_hotel
      - kibana
      - grafana
      - seq
    networks:
      - resthotel

  grafana:
    # container_name: grafana
    image: grafana/grafana-enterprise:8.2.1
    environment:
      - GF_SERVER_ROOT_URL=http://nginx/grafana
    depends_on:
      - prometheus
    ports:
      - "3000"
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - resthotel

  prometheus:
    # container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - promethues:/promethues
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090"
    networks:
      - resthotel

  seq:
    # container_name: seq
    image: datalust/seq
    volumes:
      - seq:/data
    ports:
      #UI PORT
      - "8000:80"
      # INGEST PORT
      - "5341"
    environment:
      ACCEPT_EULA: "Y"
      # SEQ_API_CANONICALURI: "http://nginx/seq"
    networks:
      - resthotel

  redis:
    # container_name: redis
    image: redis
    volumes:
      - redis_stored:/data
    ports:
      - "6379"
    networks:
      - resthotel

  sql:
    # container_name: sql
    image: mcr.microsoft.com/mssql/server
    ports:
      - "1433"
    environment:
      #default userid: "sa"
      SA_PASSWORD: pa55w0rd!
      ACCEPT_EULA: "Y"
    networks:
      - resthotel
    volumes:
      - mssqlsystem:/var/opt/mssql
      - mssqluser:/var/opt/sqlserver

volumes:
  elk: {}
  grafana: {}
  promethues: {}
  seq: {}
  redis_stored: {}
  mssqlsystem: {}
  mssqluser: {}

networks:
  resthotel:
    driver: overlay
